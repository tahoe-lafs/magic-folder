# https://circleci.com/docs/2.0/

version: 2
workflows:
  version: 2
  ci:
    jobs:
      # Start with jobs testing various platforms.

      # Every job that pulls a Docker image from Docker Hub needs to provide
      # credentials for that pull operation to avoid being subjected to
      # unauthenticated pull limits shared across all of CircleCI.  Use this
      # first job to define a yaml anchor that can be used to supply a
      # CircleCI job context which makes Docker Hub credentials available in
      # the environment.
      #
      # Contexts are managed in the CircleCI web interface:
      #
      #  https://app.circleci.com/settings/organization/github/LeastAuthority/contexts
      - "debian-10": &DOCKERHUB_CONTEXT
          context:
            - "dockerhub-auth"

      - "debian-9":
          <<: *DOCKERHUB_CONTEXT
          requires:
            - "debian-10"

      - "ubuntu-20.04":
          <<: *DOCKERHUB_CONTEXT
      - "ubuntu-18.04":
          <<: *DOCKERHUB_CONTEXT
          requires:
            - "ubuntu-20.04"

      - "fedora-34":
          <<: *DOCKERHUB_CONTEXT
      - "fedora-33":
          <<: *DOCKERHUB_CONTEXT
          requires:
            - "fedora-34"

      - "centos-8":
          <<: *DOCKERHUB_CONTEXT

      # Test against PyPy 2.7/7.3.0
      - "pypy2.7-7.3":
          <<: *DOCKERHUB_CONTEXT

      # Other assorted tasks and configurations
      - "lint":
          <<: *DOCKERHUB_CONTEXT
      - "c-locale":
          <<: *DOCKERHUB_CONTEXT
      # Any locale other than C or UTF-8.
      - "another-locale":
          <<: *DOCKERHUB_CONTEXT

      - "integration":
          <<: *DOCKERHUB_CONTEXT
          requires:
            # If the unit test suite doesn't pass, don't bother running the
            # integration tests.
            - "debian-10"

      - "integration-1.14":
          <<: *DOCKERHUB_CONTEXT
          requires:
            # If the unit test suite doesn't pass, don't bother running the
            # integration tests.
            - "debian-10"

      - "integration-master":
          <<: *DOCKERHUB_CONTEXT
          requires:
            # If the unit test suite doesn't pass, don't bother running the
            # integration tests.
            - "debian-10"

  images:
    # Build the Docker images used by the ci jobs.  This makes the ci jobs
    # faster and takes various spurious failures out of the critical path.
    triggers:
      # Build once a day
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - "main"

    jobs:
      - "build-image-debian-9":
          <<: *DOCKERHUB_CONTEXT
      - "build-image-debian-10":
          <<: *DOCKERHUB_CONTEXT
      - "build-image-ubuntu-18.04":
          <<: *DOCKERHUB_CONTEXT
      - "build-image-ubuntu-20.04":
          <<: *DOCKERHUB_CONTEXT
      - "build-image-fedora-33":
          <<: *DOCKERHUB_CONTEXT
      - "build-image-fedora-34":
          <<: *DOCKERHUB_CONTEXT
      - "build-image-centos-8":
          <<: *DOCKERHUB_CONTEXT
      - "build-image-pypy-2.7-7.3.4-buster":
          <<: *DOCKERHUB_CONTEXT


jobs:
  dockerhub-auth-template:
    # This isn't a real job.  It doesn't get scheduled as part of any
    # workhlow.  Instead, it's just a place we can hang a yaml anchor to
    # finish the Docker Hub authentication configuration.  Workflow jobs using
    # the DOCKERHUB_CONTEXT anchor will have access to the environment
    # variables used here.  These variables will allow the Docker Hub image
    # pull to be authenticated and hopefully avoid hitting and rate limits.
    docker:
      - image: "null"
        auth: &DOCKERHUB_AUTH
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

    steps:
      - run:
          name: "Schema conformity"
          command: |

  lint:
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "circleci/python:2"

    steps:
      - "checkout"

      - run:
          name: "Install tox"
          command: |
            pip install --user tox

      - run:
          name: "Static-ish code checks"
          command: |
            ~/.local/bin/tox -e codechecks-junit

      - store_test_results:
          path: "junit/"

  debian-10: &DEBIAN
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/debian:10"
        user: "nobody"

    environment: &UTF_8_ENVIRONMENT
      # In general, the test suite is not allowed to fail while the job
      # succeeds.  But you can set this to "yes" if you want it to be
      # otherwise.
      ALLOWED_FAILURE: "no"
      # Tell Hypothesis which configuration we want it to use.
      MAGIC_FOLDER_HYPOTHESIS_PROFILE: "magic-folder-ci"
      # Tell the C runtime things about character encoding (mainly to do with
      # filenames and argv).
      LANG: "en_US.UTF-8"
      # Select a tox environment to run for this job.
      MAGIC_FOLDER_TOX_ENVIRONMENT: "py27-coverage"
      # Additional arguments to pass to tox.
      MAGIC_FOLDER_TOX_ARGS: ""
      # The path in which test artifacts will be placed.
      ARTIFACTS_OUTPUT_PATH: "/tmp/artifacts"
      # Convince all of our pip invocations to look at the cached wheelhouse
      # we maintain.
      WHEELHOUSE_PATH: &WHEELHOUSE_PATH "/tmp/wheelhouse"
      PIP_FIND_LINKS: "file:///tmp/wheelhouse"

    # pip cannot install packages if the working directory is not readable.
    # We want to run a lot of steps as nobody instead of as root.
    working_directory: "/tmp/project"

    steps:
      - "checkout"
      - run: &SETUP_VIRTUALENV
          name: "Setup virtualenv"
          command: |
            /tmp/project/.circleci/setup-virtualenv.sh \
                "/tmp/venv" \
                "/tmp/project" \
                "${WHEELHOUSE_PATH}" \
                "${MAGIC_FOLDER_TOX_ENVIRONMENT}" \
                "${MAGIC_FOLDER_TOX_ARGS}"

      - run: &RUN_TESTS
          name: "Run test suite"
          command: |
            /tmp/project/.circleci/run-tests.sh \
                "/tmp/venv" \
                "/tmp/project" \
                "${ALLOWED_FAILURE}" \
                "${ARTIFACTS_OUTPUT_PATH}" \
                "${MAGIC_FOLDER_TOX_ENVIRONMENT}" \
                "${MAGIC_FOLDER_TOX_ARGS}"
          # trial output gets directed straight to a log.  avoid the circleci
          # timeout while the test suite runs.
          no_output_timeout: "20m"

      - store_test_results: &STORE_TEST_RESULTS
          path: "/tmp/artifacts/junit"

      - store_artifacts: &STORE_TEST_LOG
          # Despite passing --workdir /tmp to tox above, it still runs trial
          # in the project source checkout.
          path: "/tmp/project/_trial_temp/test.log"

      - store_artifacts: &STORE_ELIOT_LOG
          path: "/tmp/project/eliot.log"

      - store_artifacts: &STORE_OTHER_ARTIFACTS
          # Store any other artifacts, too.  This is handy to allow other jobs
          # sharing most of the definition of this one to be able to
          # contribute artifacts easily.
          path: "/tmp/artifacts"

      - run: &SUBMIT_COVERAGE
          name: "Submit coverage results"
          command: |
            /tmp/venv/bin/codecov --flags unit-test


  debian-9:
    <<: *DEBIAN
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/debian:9"
        user: "nobody"


  pypy2.7-7.3:
    <<: *DEBIAN
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/pypy:2.7-7.3.4-buster"
        user: "nobody"

    environment:
      <<: *UTF_8_ENVIRONMENT
      MAGIC_FOLDER_TOX_ENVIRONMENT: "pypy27-coverage"
      ALLOWED_FAILURE: "yes"


  c-locale:
    <<: *DEBIAN

    environment:
      <<: *UTF_8_ENVIRONMENT
      LANG: "C"


  another-locale:
    <<: *DEBIAN

    environment:
      <<: *UTF_8_ENVIRONMENT
      # aka "Latin 1"
      LANG: "en_US.ISO-8859-1"


  integration: &INTEGRATION
    <<: *DEBIAN

    environment:
      <<: *UTF_8_ENVIRONMENT
      # Select the integration tests tox environments.
      MAGIC_FOLDER_TOX_ENVIRONMENT: "integration-junit"

    steps:
      - "checkout"
      # DRY, YAML-style.  See the debian-10 steps.
      - run: *SETUP_VIRTUALENV
      - run: *RUN_TESTS
      - store_test_results:
          path: "junit/"
      - store_artifacts: *STORE_ELIOT_LOG
      - store_artifacts: *STORE_OTHER_ARTIFACTS
      - run:
          name: "Submit coverage results"
          command: |
            /tmp/venv/bin/codecov --flags integration

  integration-1.14:
    <<: *INTEGRATION

    environment:
      <<: *UTF_8_ENVIRONMENT
      # Select the integration tests tox environments.
      MAGIC_FOLDER_TOX_ENVIRONMENT: "integration-1_14-junit"

  integration-master:
    <<: *INTEGRATION

    environment:
      <<: *UTF_8_ENVIRONMENT
      # Select the integration tests tox environments.
      MAGIC_FOLDER_TOX_ENVIRONMENT: "integration-master-junit"


  ubuntu-18.04:
    <<: *DEBIAN
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/ubuntu:18.04"
        user: "nobody"


  ubuntu-20.04:
    <<: *DEBIAN
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/ubuntu:20.04"
        user: "nobody"


  centos-8: &RHEL_DERIV
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/centos:8"
        user: "nobody"

    environment: *UTF_8_ENVIRONMENT

    # pip cannot install packages if the working directory is not readable.
    # We want to run a lot of steps as nobody instead of as root.
    working_directory: "/tmp/project"

    steps:
      - "checkout"
      - run: *SETUP_VIRTUALENV
      - run: *RUN_TESTS
      - store_test_results: *STORE_TEST_RESULTS
      - store_artifacts: *STORE_TEST_LOG
      - store_artifacts: *STORE_ELIOT_LOG
      - store_artifacts: *STORE_OTHER_ARTIFACTS
      - run: *SUBMIT_COVERAGE


  fedora-33:
    <<: *RHEL_DERIV
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/fedora:33"
        user: "nobody"


  fedora-34:
    <<: *RHEL_DERIV
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "magicfolderci/fedora:34"
        user: "nobody"

  build-image: &BUILD_IMAGE
    # This is a template for a job to build a Docker image that has as much of
    # the setup as we can manage already done and baked in.  This cuts down on
    # the per-job setup time the actual testing jobs have to perform - by
    # perhaps 10% - 20%.
    #
    # https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
    docker:
      - auth: *DOCKERHUB_AUTH
        image: "docker:17.05.0-ce-git"

    environment:
      DISTRO: "magicfolderci/<DISTRO>:foo"
      TAG: "magicfolderci/distro:<TAG>"

    steps:
      - "checkout"
      - "setup_remote_docker"
      - run:
          name: "Log in to Dockerhub"
          command: |
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
      - run:
          name: "Build image"
          command: |
            docker \
                build \
                --build-arg TAG=${TAG} \
                -t magicfolderci/${DISTRO}:${TAG} \
                -f ~/project/.circleci/Dockerfile.${DISTRO} \
                ~/project/
      - run:
          name: "Push image"
          command: |
            docker push magicfolderci/${DISTRO}:${TAG}


  build-image-debian-9:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "debian"
      TAG: "9"


  build-image-debian-10:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "debian"
      TAG: "10"


  build-image-ubuntu-18.04:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "ubuntu"
      TAG: "18.04"


  build-image-ubuntu-20.04:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "ubuntu"
      TAG: "20.04"


  build-image-centos-8:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "centos"
      TAG: "8"


  build-image-fedora-33:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "fedora"
      TAG: "33"


  build-image-fedora-34:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "fedora"
      TAG: "34"


  build-image-pypy-2.7-7.3.4-buster:
    <<: *BUILD_IMAGE

    environment:
      DISTRO: "pypy"
      TAG: "2.7-7.3.4-buster"
